* Consejos
** Aprende a usar la "línea de comandos"
   - El interfaz visual de ventanas de los
     sistemas operativos es muy útil para
     muchas tareas pero no para todas.
   - Por ejemplo: crear ficheros, poner en
     marcha programas, analizar el estado de
     la red, etc. son tareas que puedes
     hacer más rápidamente desde la línea de
     comandos.
   - Si usas Unix es más que probable que
     estés habituado a usar la línea de
     comandos.
   - Si usas Windows puedes encontrar ayuda
     en este video
     https://www.youtube.com/watch?v=VyiGZW0fTxk
     (aviso: la música es horrible)
   - Despues de poner en marcha el "command
     prompt" necesitas aprender el lenguaje
     de los comandos. Este enlace puede
     ayudarte:
     https://www.ntu.edu.sg/home/ehchua/programming/howto/CMD_Survival.html
** Aprende el proceso de compilación
   - Cuando se trabaja con un IDE tan
     potente como Eclipse, hay muchos
     "detalles" importantes que pasan
     desapercibidos. Entre ellos el proceso
     de compilación de Java.
   - Podeis empezar por este enlace y luego
     buscar algo más de información:
     http://www.oracle.com/technetwork/java/compile-136656.html
** Java desde la línea de comandos
   - Como habéis podido ver, los comandos
     a usar para compilar y ejecutar desde
     la línea de comandos son javac y java.
   - Dichos comandos están disponibles en
     cualquier instalación moderna de Unix.
   - Para poder utilizar java desde la línea
     de comandos en Windows es necesario
     añadir "Java" a la variable de entorno PATH:
     - Selecciona Start -> Computer -> System Properties -> Advanced system settings -> Environment Variables -> System variables -> PATH.
     - En Vista, selecciona Start -> My Computer -> Properties -> Advanced -> Environment Variables -> System variables -> PATH.
     - En Windows XP, Selecciona Start -> Control Panel -> System -> Advanced -> Environment Variables -> System variables -> PATH.
     - Algo más de información en https://www.computerhope.com/issues/ch000549.htm
     - Tienes que añadir el directorio bin
       del JDK al principio de la variable PATH
     - El directorio suele tener un nombre como este:
       "C:\Program Files\Java\jdk1.8.0_144\bin"
     - La existencia del directorio depende de que
       tengas instalado el JDK de Java (lo más
       probable es que esté instalado con DrJava o
       con Eclipse, pero siempre puedes instalarlo
       directamente: http://www.oracle.com/technetwork/java/javase/downloads/index.html)
     - Tendrías que añadir el directorio
       en cuestión al principio del PATH incluyendo
       un punto y coma, algo como esto:
       "C:\Program Files\Java\jdk1.8.0_144\bin;"
     - Asegúrate que se guarda
       (dale a OK varias veces ;)
        Click OK three times.
     - Comprueba que todo está ok ejecutando
       un "command prompt":
     - All Programs -> Accessories -> Command Prompt
     - Tiene que aparecer algo como esto:
#+BEGIN_EXAMPLE
  Microsoft Windows [Version 6.3.9600]
  (c) 2013 Microsoft Corporation. All rights reserved.
  C:\Users\username>
#+END_EXAMPLE
     - Para confirmar que todo ha ido bien y que
       tienes disponible el compilador escribe:
#+BEGIN_EXAMPLE
  C:\Users\username>javac -version
  javac 1.8.0_144
  C:\Users\username>
#+END_EXAMPLE
     - Para confirmar que todo ha ido bien y que
       tienes disponible el intérprete escribe:
#+BEGIN_EXAMPLE
  C:\Users\username>java -version
  java version "1.8.0_144"
  Java(TM) SE Runtime Environment (build 1.8.0_144)
  Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)
#+END_EXAMPLE
     - Como vas a usar la línea de comandos
       frecuentemente,
       es recomendable personalizarla:
     - Click con el botón derecho en la barra del
       command prompt
     - Seccionar Properties
     - Establecer Layout -> Screen Buffer Size to 80 x 500.
     - Establecer Options -> Edit Options -> QuickEdit Mode.
     - Seleccionar Options -> Edit Options -> Insert Mode.
   - Para compilar desde la línea de comandos
     - Navega desde el command prompt al directorio donde
       tienes el código fuente (ficheros .java)
     - Por ejemplo
#+BEGIN_EXAMPLE
  C:\Users\username>cd c:\users\username\sesion03
  C:\Users\username\sesion03>
#+END_EXAMPLE
     - username es tu usuario en windows
     - Compila usando javac:
#+BEGIN_EXAMPLE
  C:\Users\username\sesion01>javac HolaMundo.java
  C:\Users\username\sesion01>
#+END_EXAMPLE
   - Para ejecutar desde la línea de comandos
     usamos el intérprete java:
#+BEGIN_EXAMPLE
  C:\Users\username\sesion01>java HolaMundo
  Hola mundo
  C:\Users\username\sesion01>
#+END_EXAMPLE
** Aprende a usar un buen editor de texto
   - Candidatos: emacs, vim, sublime y atom.
* Sesión 00: presentación
* Sesión 01: clases, objetos y referencias (transparencias Tema 1, no en orden)
  - Clase: plantilla para fabricar objetos
  - Objetos: datos en memoria
  - Variables, atributos, parámetros, etc.: referencias
  - Todo realizado con una clases genérica A que es un contenedor de un entero
  - Transparencias tema 1
* Sesión 02: anatomía de una clase (transparencias Tema 1, no en orden)
  - Recordar: una clase es una plantilla para
    fabricar (new) objetos
  - Anatomía:
    - Atributos
    - Métodos
  - Ejemplo Punto2D
    - Empezamos representando el punto con coordenadas cartesianas
    - Aparecen problemas de ámbito de nombres
    - Sin esconder nada (sin modificadores), el código del cliente accede a atributos.
    - Evolucionamos a polares: impacto en el código cliente
* Sesión 03: repaso, terminología, modificadores y modelización (transparencias Tema 1, no en orden)
  - https://github.com/aherranz/programacion2
  - Cerramos el ejemplo y repasamos significados
  - Terminología
    - Clase (a veces tipo, casi nunca plantilla)
    - Objetos (instancias, se crean con new)
    - Atributos (member variables)
    - Métodos (member function)
  - Modificadores (members)
    - Visibilidad: public...
    - Comportamiento: final
    - Ámbito: static
  - Modificadores (classes):
    - Visibilidad
    - Abstract
  - Para qué sirve todo esto: modelización
    - Mente
    - Concepto
    - Implementación
    - Ejemplos: coches (carreras, concesionarios),
      personas, cuentas bancarias, geometría,
      elemento en videojuego (ej. snake),
      zapateria,
** Preguntas
   - Si tengo dos constructores, ¿cuál se ejecuta?
   - En el que encajen los argumentos, pero el
     código del constructor por defecto (el que
     no tiene argumentos) se ejecuta siempre que
     se crea una instancia.
* Sesión 04: Tema 2 (colecciones acotadas)
   - Recordatorio:
     https://github.com/aherranz/programacion2
   - Vemos algún ejemplo de sus modelados
     realizados por los alumnos (15 mins).
   - Revisita explícita: paso de parámetros
     (transparencias)
     - Cómo funciona una llamada a un método?
     - Parámetros: por referencia vs por valor
     - En Java?
     - Explorar transparencias 3 tema 1,
       pg 4-7
   - Tema 2: nos guiamos por las
     transparencias.
   - Ejercicios: ImprimirGuia e
     ImprimirGuiaOrdenada
     - Tu programa tiene que leer órdenes de
       la entrada estándar
     - Dos tipos de órdenes: Añadir y Borrar
       - a {nombre} {teléfono}
       - r {nombre}
   - El primero usa "conjuntos" y el segundo "listas"
* Sesión 05: Tema 2 (colecciones acotadas)
  - Repasar consejos.
  - Continuamos con los ejercicios de la guía.

* Sesión 06: Tema 2 (colecciones acotadas)
  - Continuamos con los ejercicios de la guía
  - Los estudiantes intentan resolver el problema
* Sesión 07: Tema 2/4 (colecciones acotadas / TAD)
  - Revisar consejos
  - Abstracción:
    - Código que usa ("cliente"):
      el programa principal (ImprimirGuia)
    - Código usado ("proveedor"):
      el array y los TODOs
      (TODO = To Do = Por hacer)
  - Cada código un desarrollador
    - El desarrollador del código cliente: Herranz
    - El desarrollador del código proveedor: ???
  - Crucial: definir un interfaz
  - Tipo Abstracto de Datos
    - Un tipo (¿qué es un "tipo"?)
    - Sus operaciones
    - Un significado
    - Una implementación oculta
  - En Java
    - Clase
    - Métodos
    - Comentarios
    - Atributos
  - Ejercicio:
    - Decidir el interfaz: Herranz vs. ???
      - nombre del tipo: AgendaOrdenada
      - nombre de las operaciones y parámetros:
        - public void añadir(String nombre, String telefono)
        - public void borrar(String nombre)
        - public String agendaAstring()
      - significado
        - Añadir: añade una nueva entrada a la agenda si el nombre no está, si el nombre está cambia el teléfono
        - Borrar: elimina de la agenda la entrada asociada al nombre
        - Agenda a string: devuelve un string con la representación de la agenda (ordenada por nombre)
    - Decidir testing:
      1. Ejemplo de órdenes (ordenes.txt)
      2. Salida esperada (salida.ans)
      2. Comparar salida.ans con el resultado de:
         java ImprimirGuiaOrd < ordenes.txt
    - Implementar el código cliente (Herranz)
    - Implementar el código proveedor (vosotros)
    - Espero entregas: moodle
* Sesión 08: Tema 3 (modularización)
  - La importancia de esta asignatura
    - Fundamentos (*)
    - Algoritmos (*)
    - Estructuras de datos (**)
    - Diseño y arquitectura (**)
      - ¡Aquí estamos!
  - Aprendemos en esta clase orientaciones
    para poder "agrupar" código.
  - Código cliente y código proveedor
    (el otro día lo llamé servicio)
  - Propuesta: construir una biblioteca con
    todo el código "proveedor" que hemos ido
    haciendo hasta ahora. A saber:
    - Punto2D
    - Agenda
    - AgendaOrdenada
  - Qué es una librería? Un conjunto de módulos
  - Qué es un módulo? Una agrupación de
    tipos y funciones (depende mucho del lenguaje)
  - En Java hay dos formas de hacer módulos
    - Paquetes (espacios de nombres = carpetas)
      - En cada paquete hay otros (sub)paquetes y clases
    - Clases
  - Vamos a ver algunos ejemplos y su compilación:
    - a.b
    - a.c
    - a.c.d
    - a.c.e
  - Jugamos con javac y con java
    - Empezamos con javac A.java y acabamos con
    - javac -d . A.java
    - javac -d . B.java
